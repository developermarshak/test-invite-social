{"version":3,"sources":["components/Loader/index.tsx","services/TokenStorage.ts","services/Connect.ts","components/LoginPage/index.tsx","components/PhotoUpload/index.tsx","components/Invite/index.tsx","components/UserPage/index.tsx","components/RegisterPage/index.tsx","components/UsersPage/index.tsx","components/InvitePage/InviteCard/index.tsx","components/InvitePage/index.tsx","components/PrivateRoute/index.tsx","components/Root/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Loader","className","React","Component","cookies","Cookies","setToken","token","set","path","getToken","get","removeToken","LOGIN_PATH","tryLogin","email","password","axiosInstance","a","data","post","getConfig","res","config","headers","tokenRes","classNames","require","LoginPage","props","onSubmit","e","setState","loading","preventDefault","state","then","customHistory","push","finally","setEmail","target","value","length","setPassword","errors","this","rest","classes","method","buttonText","title","label","onChange","type","to","UPLOAD_PATH","PhotoUpload","file","formData","FormData","append","photoSrc","files","photoSrcRes","Header","Title","Body","src","alt","FileInput","Footer","onClick","STAT_PATH","Invite","componentDidMount","registered","wait","render","color","icon","header","toString","footer","UPDATE_PATH","UserPage","put","user","description","onSubmitPassword","loadingPassword","oldPassword","newPassword","setOldPassword","setNewPassword","setDescription","id","photo","Content","Row","cards","Col","width","sm","lg","readOnly","REGISTRATION_PATH","RegisterPage","loaded","tryRegistration","getData","inviteCode","invite_code","setStateField","field","match","params","for_email","history","location","UsersPage","updateUsers","setPage","page","users","pages","BackToProfile","pagesRes","i","ColHeader","map","List","InviteCard","copied","invite","code","text","onCopy","INVITE_PATH","InvitePage","updateData","catch","invites","PrivateRoute","children","pathname","from","Root","errorHandler","error","errorMessage","response","request","status","url","responseURL","error_description","errorItem","property_path","replace","message","error_message","indexOf","setErrors","Promise","reject","setTimeout","Main","exact","axios","create","baseURL","interceptors","use","createBrowserHistory","App","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e9013852.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.css';\r\n\r\nclass Loader extends React.Component{\r\n    render() {\r\n        return <div className={\"loader-element\"}> </div>;\r\n    }\r\n}\r\n\r\nexport default Loader;","import Cookies from 'universal-cookie';\r\nconst cookies = new Cookies();\r\nexport function setToken(token: string | null) {\r\n    cookies.set('token', token, { path: '/' });\r\n}\r\n\r\nexport function getToken(): string | null {\r\n    return cookies.get('token');\r\n}\r\n\r\nexport function removeToken() {\r\n    cookies.set('token', \"\", { path: '/' });\r\n}","import {getToken, setToken} from './TokenStorage';\r\nimport {AxiosInstance} from \"axios\";\r\n\r\nconst LOGIN_PATH = \"/api/auth/login\";\r\n\r\nexport function getUrl(path: string) {\r\n    return `http://symfony.localhost${path}`\r\n}\r\n\r\nexport function getInnerUrl(path: string) {\r\n    return `http://localhost:4000${path}`\r\n}\r\n\r\nexport async function tryLogin(email: string, password: string, axiosInstance: AxiosInstance) {\r\n    const data = {email, password};\r\n    let res = await axiosInstance.post(LOGIN_PATH, data, getConfig(false));\r\n    const token = res.data.token;\r\n    setToken(token);\r\n}\r\n\r\nexport function getConfig(token: string | null | false = null) {\r\n    let config = {\r\n        headers: {\r\n            'content-type': 'application/json',\r\n        }\r\n    };\r\n\r\n    const tokenRes = (token === null) ? getToken() : token;\r\n\r\n    if(tokenRes){\r\n        config.headers = {...config.headers, ...{\"authorization\":`Bearer ${tokenRes}`}};\r\n    }\r\n\r\n    return config;\r\n}","import React, {ChangeEvent, FormEvent} from 'react';\r\n\r\nimport { FormCard, FormTextInput, Card} from \"tabler-react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\n\r\nimport {setToken} from \"../../services/TokenStorage\"\r\nimport Loader from \"../Loader\";\r\n\r\nimport types from './types';\r\nimport \"./styles.css\";\r\nimport {tryLogin} from \"../../services/Connect\";\r\n\r\nlet classNames = require('classnames');\r\n\r\nclass LoginPage extends React.Component<types.Props, types.State>{\r\n\r\n    constructor(props: types.Props) {\r\n        super(props);\r\n        this.state = {\r\n            email: this.props.email || \"\",\r\n            password: this.props.password || \"\",\r\n            errors: [],\r\n            loading: false\r\n        };\r\n    }\r\n\r\n    onSubmit = async (e: FormEvent) => {\r\n        this.setState({loading: true})\r\n        e.preventDefault();\r\n        const {email, password} = this.state;\r\n        tryLogin(email, password, this.props.axiosInstance).then(() => {\r\n            const history = this.props.customHistory;\r\n            history.push(\"/user/me\");\r\n        }).finally(() => {\r\n            this.setState({loading:false});\r\n        });\r\n    }\r\n\r\n    setEmail = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let email = \"\";\r\n        if(e.target && e.target.value && e.target.value.length > 0){\r\n            email = e.target.value;\r\n        }\r\n\r\n        this.setState({email});\r\n    }\r\n\r\n    setPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let password = \"\";\r\n        if(e.target && e.target.value && e.target.value.length > 0){\r\n            password = e.target.value;\r\n        }\r\n\r\n        this.setState({password});\r\n    }\r\n\r\n    render() {\r\n        const {className = false, customHistory, ...rest} = this.props;\r\n        const classes = classNames(\"wrapper\", className);\r\n\r\n        if(this.state.loading){\r\n            return <Loader/>;\r\n        }\r\n        return (\r\n            <>\r\n                <div className={classes} {...rest}>\r\n                    <FormCard onSubmit={ this.onSubmit } method={\"POST\"} buttonText={\"Login\"}  title={\"Login page\"}>\r\n                            <FormTextInput label={\"Email\"} onChange={ this.setEmail } type=\"email\" />\r\n                            <FormTextInput label={\"Password\"} onChange={ this.setPassword } type=\"password\" />\r\n                    </FormCard>\r\n                    <Card>\r\n                        <Link className=\"btn btn-sm btn-success\" to={\"/registration\"}>\r\n                            Registration\r\n                        </Link>\r\n                    </Card>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginPage;","import React, {ChangeEvent, FormEvent} from 'react';\r\n\r\nimport { Form, Button, Card} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\n\r\nimport {getConfig} from \"../../services/Connect\";\r\n\r\nimport types from './types';\r\nimport \"./styles.css\";\r\n\r\nconst UPLOAD_PATH = \"/api/photo\";\r\nlet classNames = require('classnames');\r\n\r\nclass PhotoUpload extends React.Component<types.Props, types.State>{\r\n\r\n    constructor(props: types.Props) {\r\n        super(props);\r\n        this.state = {\r\n            photoSrc: this.props.photoSrc,\r\n            file: null,\r\n            token: null\r\n        };\r\n    }\r\n\r\n    onSubmit = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n\r\n        const {file} = this.state;\r\n\r\n        if(!file){\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n\r\n        formData.append('photo',file);\r\n\r\n        let config = getConfig();\r\n        config.headers[\"content-type\"] = 'multipart/form-data';\r\n\r\n        let res = await this.props.axiosInstance.post(UPLOAD_PATH, formData, config);\r\n\r\n        this.setState({\r\n            photoSrc: res.headers[\"x-location\"]\r\n            });\r\n\r\n    }\r\n\r\n    onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let file: File | null = null;\r\n        if(e.target && e.target.files && e.target.files.length > 0){\r\n            file = e.target.files[0];\r\n        }\r\n\r\n        this.setState({file});\r\n    }\r\n\r\n    render() {\r\n        const {className = false, photoSrc, ...rest} = this.props;\r\n        const photoSrcRes = this.state.photoSrc || photoSrc;\r\n\r\n        const classes = classNames(\"wrapper\", className);\r\n\r\n        return (\r\n                <Card className={classes} {...rest}>\r\n                    <Card.Header>\r\n                        <Card.Title>Your Photo</Card.Title>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <>\r\n                        {photoSrcRes && <img className={\"PhotoUpload-photo\"}\r\n                                             src={`http://symfony.localhost/img/${photoSrcRes}`} alt={\"Profile\"}/>}\r\n\r\n                        <Form.FileInput  onChange={this.onChange}/>\r\n                        </>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Button onClick={this.onSubmit} className={\"btn-block btn-primary\"}>Upload Photo</Button>\r\n                    </Card.Footer>\r\n                </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhotoUpload;","import React from 'react';\r\nimport {Card, StampCard} from \"tabler-react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport Loader from \"../Loader\";\r\nimport {getConfig} from \"../../services/Connect\";\r\n\r\nimport types from \"./types\";\r\n\r\nconst STAT_PATH = \"/api/stat/\";\r\nexport default class Invite extends React.Component<types.Props, types.State>{\r\n    constructor(props: types.Props){\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            registered: 0,\r\n            wait: 0\r\n        };\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        const data = await this.props.axiosInstance.get(STAT_PATH, getConfig());\r\n\r\n        this.setState({\r\n            loading: false,\r\n            registered: data.data.registered,\r\n            wait: data.data.wait\r\n        });\r\n    }\r\n\r\n    render = () => {\r\n        return <Card>\r\n            <Card.Header>\r\n                <Card.Title>Statistics invites</Card.Title>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                {\r\n                    this.state.loading ? <Loader/> : <>\r\n                        <StampCard\r\n                            color=\"red\"\r\n                            icon=\"users\"\r\n                            header={<>{this.state.registered.toString()} <small>Registered users</small></>}\r\n                            footer={`${this.state.wait.toString()} waited users`}\r\n                        />\r\n                        <Link className=\"btn btn-sm btn-success\" to={\"/invite\"}>\r\n                            Invite User\r\n                        </Link>\r\n                    </>\r\n                }\r\n\r\n            </Card.Body>\r\n        </Card>;\r\n    }\r\n}","import React, {ChangeEvent, FormEvent} from 'react';\r\nimport { Card, FormTextInput, Page, Grid, Button} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\n\r\nimport PhotoUpload from \"../PhotoUpload\";\r\nimport Invite from \"../Invite\";\r\nimport Loader from '../Loader';\r\n\r\nimport {removeToken} from \"../../services/TokenStorage\";\r\n\r\nimport types from './types';\r\nimport \"./styles.css\";\r\nimport {getConfig} from \"../../services/Connect\";\r\n\r\nconst UPDATE_PATH = \"/api/user/me\";\r\n\r\nclass UserPage extends React.Component<types.Props, types.State>{\r\n        constructor(props: types.Props){\r\n            super(props);\r\n            this.state = {\r\n                loading: true,\r\n                loadingPassword: false,\r\n                oldPassword: null,\r\n                newPassword: null,\r\n                user: {\r\n                    id: 0,\r\n                    email: \"loading...\",\r\n                    description: null,\r\n                    photo: null\r\n                }\r\n            }\r\n        }\r\n\r\n    onSubmit = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        });\r\n        this.put({\"description\": this.state.user.description}).then(() => {\r\n            this.setState({loading: false});\r\n        }, () => {\r\n            this.setState({loading: false});\r\n        })\r\n    }\r\n\r\n    onSubmitPassword = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loadingPassword: true\r\n        });\r\n        this.put({\"old_password\": this.state.oldPassword, \"password\": this.state.newPassword}, \"/password\").then(() => {\r\n            this.setState({loadingPassword: false});\r\n        }, () => {\r\n            this.setState({loadingPassword: false});\r\n        })\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        const data = await this.props.axiosInstance.get(UPDATE_PATH, getConfig());\r\n        const user: types.User = data.data;\r\n        this.setState({user, loading: false});\r\n    }\r\n\r\n    put = async (data: object, path: string = \"\") => {\r\n            return this.props.axiosInstance.put(UPDATE_PATH+path, data, getConfig());\r\n    }\r\n\r\n    setOldPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let oldPassword = null;\r\n        if(e.target && e.target.value && e.target.value.length > 0){\r\n            oldPassword = e.target.value;\r\n        }\r\n\r\n        this.setState({oldPassword});\r\n    }\r\n\r\n    setNewPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newPassword = null;\r\n        if(e.target && e.target.value && e.target.value.length > 0){\r\n            newPassword = e.target.value;\r\n        }\r\n\r\n        this.setState({newPassword});\r\n    }\r\n\r\n    setDescription = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let description = null;\r\n        if(e.target && e.target.value && e.target.value.length > 0){\r\n            description = e.target.value;\r\n        }\r\n\r\n        const {user} = this.state;\r\n        user.description = description;\r\n\r\n        this.setState({user});\r\n    }\r\n\r\n    render() {\r\n        const {axiosInstance, customHistory} = this.props;\r\n        const {user, loadingPassword, loading} = this.state;\r\n\r\n        const description = user.description || \"\";\r\n        return (\r\n                    <Page.Content title=\"Home User Page\">\r\n                        <Grid.Row cards={true}>\r\n                            <Grid.Col width={12} sm={8} lg={4}>\r\n                                <Card>\r\n                                    <Card.Header>\r\n                                        <Card.Title>Your Profile</Card.Title>\r\n                                    </Card.Header>\r\n\r\n                                    {loading ? <Loader/> : <>\r\n                                            <Card.Body className={\"p-6\"}>\r\n                                                <FormTextInput label={\"Id\"} type=\"text\"\r\n                                                               readOnly={true} value={user.id}/>\r\n                                                <FormTextInput label={\"Email\"} type=\"text\"\r\n                                                               readOnly={true} value={user.email}/>\r\n                                                <FormTextInput label={\"Description\"} type=\"textarea\"\r\n                                                               onChange={this.setDescription} value={description}/>\r\n                                            </Card.Body>\r\n                                            <Card.Footer>\r\n                                                <Button onClick={this.onSubmit} className={\"btn-block btn-primary\"}>Save Profile</Button>\r\n                                            </Card.Footer>\r\n                                        </>\r\n                                    }\r\n                                </Card>\r\n                                <Card>\r\n                                    <Card.Header>\r\n                                        <Card.Title>Change Password</Card.Title>\r\n                                    </Card.Header>\r\n                                        {loadingPassword ? <Loader/> : <>\r\n                                            <Card.Body className={\"p-6\"}>\r\n                                                <FormTextInput label={\"Old Password\"} type=\"password\"\r\n                                                               onChange={this.setOldPassword}/>\r\n                                                <FormTextInput label={\"New Password\"} type=\"password\"\r\n                                                               onChange={this.setNewPassword}/>\r\n                                            </Card.Body>\r\n                                            <Card.Footer>\r\n                                                <Button onClick={this.onSubmitPassword} className={\"btn-block btn-primary\"}>Change</Button>\r\n                                            </Card.Footer>\r\n                                        </>\r\n                                }\r\n                                </Card>\r\n                            </Grid.Col>\r\n                            <Grid.Col width={12} sm={8} lg={4}>\r\n                                <PhotoUpload axiosInstance={axiosInstance} photoSrc={user.photo}/>\r\n                            </Grid.Col>\r\n                            <Grid.Col width={12} sm={8} lg={4}>\r\n                                <Invite axiosInstance={axiosInstance} />\r\n                                <Card>\r\n                                    <Button className=\"btn btn-block btn-dark\" onClick={() => {\r\n                                        removeToken();\r\n                                        customHistory.push(\"/auth/login\");\r\n                                    }}>Logout</Button>\r\n                                </Card>\r\n\r\n                                <Card>\r\n                                    <Button className=\"btn btn-block btn-white\" onClick={() => {\r\n                                        customHistory.push(\"/user\");\r\n                                    }}>Users</Button>\r\n                                </Card>\r\n                            </Grid.Col>\r\n                        </Grid.Row>\r\n                    </Page.Content>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserPage;","import React, {ChangeEvent, FormEvent} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport { FormCard, FormTextInput, Card} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\n\r\nimport {getConfig, tryLogin} from \"../../services/Connect\";\r\n\r\nimport types from './types';\r\nimport \"./styles.css\";\r\nimport Loader from \"../Loader\";\r\n\r\n\r\nconst REGISTRATION_PATH = \"/api/registration\";\r\nlet classNames = require('classnames');\r\n\r\nclass RegisterPage extends React.Component<types.Props, types.State>{\r\n\r\n    constructor(props: types.Props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n            email: \"\",\r\n            password: \"\",\r\n            invite_code: \"\",\r\n            errors: []\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        const match = this.props.match;\r\n\r\n        const inviteCode = (match && match.params && match.params.invite_code) ? match.params.invite_code : null;\r\n\r\n        if(inviteCode){\r\n            this.setState({loading: true});\r\n            this.getData(inviteCode).then((res) => {\r\n                this.setState({\r\n                    invite_code: inviteCode,\r\n                    email: res.data.for_email,\r\n                    loading: false\r\n                });\r\n            }, () => {\r\n                this.setState({loading: false});\r\n            });\r\n        }\r\n    }\r\n\r\n    onSubmit = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n        this.setState({loading: true});\r\n        const loaded = () => {this.setState({loading: false});}\r\n        this.tryRegistration().then(() => {\r\n            tryLogin(this.state.email, this.state.password, this.props.axiosInstance).then(() => {\r\n                this.props.customHistory.push(\"/user/me\");\r\n            }, loaded)\r\n        }, loaded);\r\n\r\n    }\r\n\r\n    getData = async (inviteCode: string) => {\r\n        return await this.props.axiosInstance.get(\"/api/registration_invite/\"+inviteCode, getConfig());\r\n    }\r\n\r\n    tryRegistration = async () => {\r\n        const {email, password, invite_code} = this.state;\r\n        const data = {email, password, invite_code};\r\n        return this.props.axiosInstance.post(REGISTRATION_PATH, data, getConfig(false));\r\n    }\r\n\r\n    setStateField = (field: 'email' | 'password' | 'invite_code') => {\r\n        return (e: ChangeEvent<HTMLInputElement>) => {\r\n            if(e.target && e.target.value){\r\n                let state = {...this.state};\r\n                state[field] = e.target.value;\r\n                this.setState(state);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {className = false, axiosInstance, customHistory, match, history, location,  ...rest} = this.props;\r\n\r\n        const classes = classNames(\"wrapper\", className);\r\n        return (\r\n            <>\r\n                <div className={classes} {...rest}>\r\n                    {this.state.loading ? <Loader/> : <FormCard onSubmit={ this.onSubmit } method={\"POST\"} buttonText={\"Register\"} title={\"Registration page\"}>\r\n                            <FormTextInput label={\"Email\"} onChange={ this.setStateField('email') } type=\"text\" value={this.state.email}/>\r\n                            <FormTextInput label={\"Password\"} onChange={ this.setStateField('password') } type=\"password\" />\r\n                            <FormTextInput label={\"Invite Code\"} onChange={ this.setStateField('invite_code') } type=\"text\" value={this.state.invite_code}/>\r\n                    </FormCard>\r\n                    }\r\n                    <Card>\r\n                        <Link className=\"btn btn-sm btn-success\" to={\"/auth/login\"}>\r\n                            Back to login\r\n                        </Link>\r\n                    </Card>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RegisterPage;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport {Page, Tag, Table, Button} from \"tabler-react\";\r\n\r\nimport Loader from \"../Loader\";\r\nimport {getConfig, getUrl} from \"../../services/Connect\";\r\nimport UserPageTypes from \"../UserPage/types\";\r\n\r\nimport \"./styles.css\";\r\nimport types from './types';\r\n\r\nconst UPDATE_PATH = \"/api/user\";\r\n\r\nclass UsersPage extends React.Component<types.Props, types.State>{\r\n    constructor(props: types.Props){\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            pages: 1,\r\n            page: 1,\r\n            users: []\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        await this.updateUsers(1);\r\n    }\r\n\r\n    setPage = (page: number) => {\r\n        this.setState({\r\n            page,\r\n            loading: true\r\n        });\r\n        this.updateUsers(page).then(() => {\r\n            this.setState({loading: false});\r\n        });\r\n    }\r\n\r\n    updateUsers = async (page: number) => {\r\n        const data = await this.props.axiosInstance.get(UPDATE_PATH+\"?page=\"+page, getConfig());\r\n        const users: UserPageTypes.User[] = data.data.users;\r\n        const pages = data.data.pages;\r\n\r\n        this.setState({users, pages, loading: false});\r\n    }\r\n\r\n    render() {\r\n        const {users, page, pages, loading} = this.state;\r\n\r\n        const BackToProfile = <>\r\n            <div>\r\n                <Link className={\"btn btn-success\"} to={'/user/me'}>Back To Profile</Link>\r\n                <br/>\r\n            </div>\r\n        </>\r\n\r\n        if(loading){\r\n            return <Page.Content title=\"Users\">\r\n                <Loader/>\r\n                {BackToProfile}\r\n            </Page.Content>\r\n        }\r\n\r\n        if(users.length === 0){\r\n            return <Page.Content title=\"Users\">\r\n                Cannot find some user, please try again later\r\n                {BackToProfile}\r\n            </Page.Content>\r\n        }\r\n        const pagesRes = [];\r\n        for(let i = page - 5; i <= pages; i++){\r\n            if(i < 1){\r\n                continue;\r\n            }\r\n            if(pagesRes.length >= 7){\r\n                break;\r\n            }\r\n            pagesRes.push(<Button onClick={ () => {\r\n                this.setPage(i);\r\n            }}>{i}</Button>);\r\n        }\r\n        return (\r\n                    <Page.Content title=\"Users\">\r\n                        <Table>\r\n                            <Table.Header>\r\n                                <Table.ColHeader>Username</Table.ColHeader>\r\n                                <Table.ColHeader>Description</Table.ColHeader>\r\n                                <Table.ColHeader>Photo</Table.ColHeader>\r\n                            </Table.Header>\r\n                            <Table.Body>\r\n\r\n                                {users.map((user: UserPageTypes.User) => <Table.Row>\r\n                                    <Table.Col>\r\n                                        <Tag.List>\r\n                                              <Tag color=\"blue\">{user.email}</Tag>\r\n                                         </Tag.List>\r\n                                    </Table.Col>\r\n                                    <Table.Col>{user.description}</Table.Col>\r\n                                    <Table.Col>\r\n                                        {\r\n                                            user.photo && <img className={\"big-img\"} alt=\"Profile\" src={getUrl(\"/img/\"+user.photo)}/>\r\n                                        }\r\n                                    </Table.Col>\r\n                                </Table.Row>)}\r\n\r\n                            </Table.Body>\r\n                        </Table>\r\n                        <div>\r\n                            {pagesRes}\r\n                        </div>\r\n                        {BackToProfile}\r\n                    </Page.Content>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UsersPage;","import React from 'react';\r\nimport {FormTextInput, Grid, Button} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport CopyToClipboard from 'react-copy-to-clipboard';\r\n\r\nimport {getInnerUrl} from \"../../../services/Connect\";\r\n\r\nimport types from './types';\r\n\r\nclass InviteCard extends React.Component<types.Props, types.State>{\r\n\r\n    constructor(props: types.Props) {\r\n        super(props);\r\n        this.state = {\r\n            copied: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const {...invite} = this.props;\r\n\r\n        return <>\r\n            <Grid.Row cards={true}>\r\n                <Grid.Col width={12} sm={12} lg={6}>\r\n                    <FormTextInput label={\"Invite Code\"} readOnly={true} type=\"text\" value={invite.code} />\r\n                </Grid.Col>\r\n                <Grid.Col width={12} sm={12} lg={6}>\r\n                    <FormTextInput label={\"To\"} readOnly={true} type=\"text\" value={invite.for_email} />\r\n                </Grid.Col>\r\n            </Grid.Row>\r\n            <Grid.Row cards={true}>\r\n                <Grid.Col width={12} sm={12} lg={12}>\r\n                    <CopyToClipboard text={getInnerUrl(\"/registration/\"+invite.code)}\r\n                                     onCopy={ () => this.setState({copied: true}) }>\r\n                        <Button className={\"btn-primary\"}>\r\n                            {this.state.copied ? <>Copied</> : <>Copy registration link</>}\r\n                        </Button>\r\n                    </CopyToClipboard>\r\n                </Grid.Col>\r\n            </Grid.Row>\r\n            <br/>\r\n        </>\r\n    }\r\n}\r\n\r\nexport default InviteCard;","import React, {ChangeEvent, FormEvent} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport { FormCard, FormTextInput, Card} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\n\r\nimport {getConfig} from \"../../services/Connect\";\r\nimport Loader from '../Loader';\r\n\r\nimport types from './types';\r\nimport InviteCard from \"../InvitePage/InviteCard\";\r\n\r\nconst INVITE_PATH = \"/api/invite\";\r\n\r\nclass InvitePage extends React.Component<types.Props, types.State>{\r\n\r\n    constructor(props: types.Props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            email: \"\",\r\n            invites: [],\r\n            errors: []\r\n        };\r\n        this.updateData();\r\n    }\r\n\r\n    onSubmit = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n        const data = {to: this.state.email};\r\n        this.setState({loading: true});\r\n\r\n        this.props.axiosInstance.post(INVITE_PATH, data, getConfig()).then(() => {\r\n            this.updateData();\r\n        }).catch(()=>{this.setState({loading: false});})\r\n\r\n    }\r\n\r\n    updateData = () => {\r\n        this.props.axiosInstance.get(INVITE_PATH, getConfig()).then((data) => {\r\n            if(data.data){\r\n                this.setState({invites: data.data, loading: false});\r\n            }\r\n        }).catch(()=>{this.setState({loading: false});});\r\n    }\r\n\r\n\r\n    setEmail = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let email = \"\";\r\n        if(e.target && e.target.value && e.target.value.length > 0){\r\n            email = e.target.value;\r\n        }\r\n\r\n        this.setState({email});\r\n    }\r\n\r\n    render() {\r\n        const {className = false, ...rest} = this.props;\r\n        const classes = \"wrapper \"+className;\r\n\r\n        const {loading, invites} = this.state;\r\n\r\n        return (\r\n            <>\r\n                <div className={classes} {...rest}>\r\n                    <FormCard onSubmit={ this.onSubmit } method={\"POST\"} buttonText={\"Generate\"} title={\"Generate invite\"}>\r\n                        <FormTextInput label={\"Person Email\"} onChange={ this.setEmail } type=\"email\" />\r\n                    </FormCard>\r\n                    {\r\n                        loading ? <Loader/> : invites.map((invite) => {\r\n                          return <><InviteCard code={invite.code} for_email={invite.for_email}/></>\r\n                        })\r\n                    }\r\n                    <Card>\r\n                        <Link to={\"/user/me\"} className=\"btn btn-sm btn-success\" >\r\n                            Back to user page\r\n                        </Link>\r\n                    </Card>\r\n                </div>\r\n\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InvitePage;","import React from 'react';\r\nimport {Route, Redirect} from \"react-router\";\r\n\r\nimport {getToken} from \"../../services/TokenStorage\";\r\n\r\nimport types from \"./types\";\r\n\r\nexport default class PrivateRoute extends React.Component<types.Props>{\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <Route {...this.props} render={({ location }) =>\r\n                    getToken() ? (\r\n                        this.props.children\r\n                    ) : (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/auth/login\",\r\n                                state: { from: location }\r\n                            }}\r\n                        />\r\n                    )\r\n                }\r\n            />\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Router, Switch} from \"react-router\";\r\nimport {Link, Route} from \"react-router-dom\";\r\nimport { Page, Alert } from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport axios, {AxiosInstance} from \"axios\";\r\nimport { createBrowserHistory, History } from 'history';\r\n\r\n\r\nimport LoginPage from \"../LoginPage\"\r\nimport UserPage from \"../UserPage\"\r\nimport RegisterPage from \"../RegisterPage\"\r\nimport UsersPage from \"../UsersPage\";\r\nimport InvitePage from \"../InvitePage\";\r\n\r\nimport {removeToken} from \"../../services/TokenStorage\";\r\nimport PrivateRoute from \"../PrivateRoute\";\r\n\r\nimport \"./styles.css\";\r\nimport types from \"./types\";\r\n\r\nexport default class Root extends React.Component<types.Props, types.State>{\r\n    protected customHistory: History;\r\n\r\n    protected axiosInstance: AxiosInstance;\r\n\r\n    constructor(props: types.Props){\r\n        super(props);\r\n\r\n        const axiosInstance = axios.create({\r\n            baseURL: 'http://symfony.localhost'\r\n        })\r\n\r\n        axiosInstance.interceptors.response.use((config) => config, error => this.errorHandler(error));\r\n\r\n        this.axiosInstance = axiosInstance;\r\n        this.customHistory = createBrowserHistory();\r\n        this.state = {\r\n            errors: []\r\n        };\r\n    }\r\n\r\n    errorHandler = (error: any) => {\r\n        let errorMessage = \"Cannot do request, please try again.\";\r\n        let errors = [];\r\n        if(error.response && error.request && error.response.status) {\r\n            const status = error.response.status;\r\n            const data = error.response.data;\r\n            const url = error.request.responseURL;\r\n\r\n            if (data.error_description && data.error_description.errors) {\r\n                errors = data.error_description.errors.map((errorItem: any) => {\r\n                    const field = errorItem.property_path.replace(\"[\", \"\").replace(\"]\", \"\");\r\n                    return field+\": \"+errorItem.message\r\n                });\r\n            }\r\n            else if(data.error_message){\r\n                errorMessage = data.error_message;\r\n            }\r\n            else if (status === 400) {\r\n                errorMessage = \"Validation error\";\r\n\r\n            }\r\n            else if (status === 401) {\r\n                if(url.indexOf(\"/api/auth/login\") === -1){\r\n                    errorMessage = \"Please login again\";\r\n                    removeToken();\r\n                    this.customHistory.push('/auth/login');\r\n                }\r\n                else{\r\n                    errorMessage = \"Invalid credentials\";\r\n                }\r\n            }\r\n            else if (status === 413){\r\n                errorMessage = \"Too big request\"\r\n            }\r\n            else if (status > 500){\r\n                errorMessage = \"Internal error please try again\"\r\n            }\r\n        }\r\n\r\n        if(errors.length === 0){\r\n            errors.push(errorMessage);\r\n        }\r\n\r\n        this.setErrors(errors);\r\n\r\n        return Promise.reject({ ...error })\r\n    }\r\n\r\n    setErrors = (errors: any) => {\r\n        this.setState({errors});\r\n        setTimeout(() => {\r\n            this.setState({errors: []});\r\n        }, 5000);\r\n    }\r\n\r\n    render = () => {\r\n        const errors = [...this.state.errors];\r\n        return <Router history={this.customHistory}>\r\n        <Page>\r\n            <Page.Main>\r\n                {\r\n                    errors.length > 0 && <div className={\"errorsContainer\"}>\r\n                        {\r\n                            errors.map((error: string) => {\r\n                                return <Alert type=\"danger\" icon=\"alert-triangle\">\r\n                                    {error}\r\n                                </Alert>\r\n                            })\r\n                        }\r\n                    </div>\r\n                }\r\n                <Switch>\r\n                    <PrivateRoute path={\"/\"} exact={true}>\r\n                        <UserPage customHistory={this.customHistory} axiosInstance={this.axiosInstance}/>\r\n                    </PrivateRoute>\r\n                    <Route path={\"/auth/login\"}>\r\n                        <LoginPage customHistory={this.customHistory} axiosInstance={this.axiosInstance}/>\r\n                    </Route>\r\n                    <Route path={\"/registration/:invite_code\"} render={(props) => {\r\n                        return <RegisterPage customHistory={this.customHistory} axiosInstance={this.axiosInstance} {...props}/>\r\n\r\n                    }}/>\r\n                    <Route path={\"/registration\"}>\r\n                        <RegisterPage customHistory={this.customHistory} axiosInstance={this.axiosInstance}/>\r\n                    </Route>\r\n                    <PrivateRoute path={\"/user/me\"}>\r\n                        <UserPage customHistory={this.customHistory} axiosInstance={this.axiosInstance}/>\r\n                    </PrivateRoute>\r\n                    <PrivateRoute path={\"/user\"}>\r\n                        <UsersPage customHistory={this.customHistory} axiosInstance={this.axiosInstance}/>\r\n                    </PrivateRoute>\r\n                    <PrivateRoute path={\"/invite\"}>\r\n                        <InvitePage axiosInstance={this.axiosInstance}/>\r\n                    </PrivateRoute>\r\n                    <Route path=\"*\">\r\n                        <div>This page not exist :( <Link to={\"/\"}>Go Home!</Link></div>\r\n                    </Route>\r\n                </Switch>\r\n            </Page.Main>\r\n        </Page></Router>;\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Root from \"./components/Root\";\r\n\r\nimport './App.css';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n        <Root className={\"App-center\"}/>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}