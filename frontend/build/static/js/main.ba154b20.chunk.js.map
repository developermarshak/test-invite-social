{"version":3,"sources":["services/TokenStorage.ts","components/Loader/index.tsx","services/Connect.ts","components/LoginPage/index.tsx","components/PhotoUpload/index.tsx","components/Invite/index.tsx","components/UserPage/index.tsx","components/RegisterPage/index.tsx","components/UsersPage/index.tsx","components/InvitePage/InviteCard/index.tsx","components/InvitePage/index.tsx","components/PrivateRoute/index.tsx","components/Root/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["cookies","Cookies","setToken","token","set","path","getToken","get","removeToken","Loader","className","React","Component","LOGIN_PATH","tryLogin","email","password","axiosInstance","data","console","log","post","getConfig","config","headers","tokenRes","classNames","require","LoginPage","props","onSubmit","e","a","setState","loading","preventDefault","state","res","customHistory","push","errors","response","statusText","setEmail","target","value","length","setPassword","this","rest","classes","method","buttonText","title","label","onChange","type","to","UPLOAD_PATH","PhotoUpload","file","formData","FormData","append","photoSrc","files","photoSrcRes","Header","Title","Body","src","alt","FileInput","Footer","onClick","STAT_PATH","Invite","componentDidMount","registered","wait","render","color","icon","header","toString","footer","UPDATE_PATH","UserPage","put","user","description","then","onSubmitPassword","loadingPassword","oldPassword","newPassword","setOldPassword","setNewPassword","setDescription","id","photo","Content","Row","cards","Col","width","sm","lg","readOnly","REGISTRATION_PATH","RegisterPage","loaded","tryRegistration","getData","inviteCode","invite_code","setStateField","field","match","params","for_email","history","location","UsersPage","updateUsers","setPage","page","users","pages","BackToProfile","i","ColHeader","map","List","InviteCard","copied","invite","code","text","onCopy","INVITE_PATH","InvitePage","updateData","catch","invites","PrivateRoute","children","pathname","from","Root","errorHandler","error","errorMessage","request","status","url","responseURL","error_description","errorItem","property_path","replace","message","error_message","indexOf","setErrors","Promise","reject","setTimeout","Main","exact","axios","create","baseURL","interceptors","use","createBrowserHistory","App","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4fACMA,EAAU,I,MAAIC,GACb,SAASC,EAASC,GACrBH,EAAQI,IAAI,QAASD,EAAO,CAAEE,KAAM,MAGjC,SAASC,IACZ,OAAON,EAAQO,IAAI,SAGhB,SAASC,IACZR,EAAQI,IAAI,QAAS,GAAI,CAAEC,KAAM,M,UCFtBI,E,iLAJP,OAAO,yBAAKC,UAAW,kBAAhB,S,GAFMC,IAAMC,W,oOCA3B,IAAMC,EAAa,kBAUZ,SAASC,EAASC,EAAeC,EAAkBC,GACtD,IAAMC,EAAO,CAACH,QAAOC,YAErB,OADAG,QAAQC,IAAIF,GACLD,EAAcI,KAAKR,EAAYK,EAAMI,GAAU,IAGnD,SAASA,IAAgD,IAAtCnB,EAAqC,uDAAN,KACjDoB,EAAS,CACTC,QAAS,CACL,eAAgB,qBAIlBC,EAAsB,OAAVtB,EAAkBG,IAAaH,EAMjD,OAJGsB,IACCF,EAAOC,Q,yVAAP,IAAqBD,EAAOC,QAA5B,GAAwC,CAAC,cAAgB,UAAhB,OAA0BC,MAGhEF,ECnBX,IAAIG,EAAaC,EAAQ,IAwFVC,E,YApFX,WAAYC,GAAqB,IAAD,8BAC5B,4CAAMA,KASVC,SAVgC,uCAUrB,WAAOC,GAAP,uBAAAC,EAAA,6DACP,EAAKC,SAAS,CAACC,SAAS,IACxBH,EAAEI,iBAFK,WAIuB,EAAKC,MAAxBrB,EAJJ,EAIIA,MAAOC,EAJX,EAIWA,SAJX,SAKaF,EAASC,EAAOC,EAAU,EAAKa,MAAMZ,eALlD,QAKCoB,EALD,QAMKnB,KAAKf,OAMTgB,QAAQC,IAAIiB,GACZlB,QAAQC,IAAIiB,EAAInB,MAEhBhB,EADcmC,EAAInB,KAAKf,OAGP,EAAK0B,MAAMS,cACnBC,KAAK,eAXTC,EAAS,IACND,KAAK,8BACZ,EAAKN,SAAS,CAACO,YAThB,kDAsBA,KAAEC,UAAY,KAAEA,SAASC,YACxBvB,QAAQC,IAAR,MAvBD,QA2BP,EAAKa,SAAS,CAACC,SAAQ,IA3BhB,0DAVqB,wDAyChCS,SAAW,SAACZ,GACR,IAAIhB,EAAQ,GACTgB,EAAEa,QAAUb,EAAEa,OAAOC,OAASd,EAAEa,OAAOC,MAAMC,OAAS,IACrD/B,EAAQgB,EAAEa,OAAOC,OAGrB,EAAKZ,SAAS,CAAClB,WA/Ca,EAkDhCgC,YAAc,SAAChB,GACX,IAAIf,EAAW,GACZe,EAAEa,QAAUb,EAAEa,OAAOC,OAASd,EAAEa,OAAOC,MAAMC,OAAS,IACrD9B,EAAWe,EAAEa,OAAOC,OAGxB,EAAKZ,SAAS,CAACjB,cAtDf,EAAKoB,MAAQ,CACTrB,MAAO,EAAKc,MAAMd,OAAS,GAC3BC,SAAU,EAAKa,MAAMb,UAAY,GACjCwB,OAAQ,GACRN,SAAS,GANe,E,sEA2DtB,IAAD,EAC+Cc,KAAKnB,MADpD,IACEnB,iBADF,SACuCuC,GADvC,EACqBX,cADrB,8CAECY,EAAUxB,EAAW,UAAWhB,GAEtC,OAAGsC,KAAKZ,MAAMF,QACH,kBAAC,EAAD,MAGP,oCACI,uCAAKxB,UAAWwC,GAAaD,GACzB,kBAAC,IAAD,CAAUnB,SAAWkB,KAAKlB,SAAWqB,OAAQ,OAAQC,WAAY,QAAUC,MAAO,cAC1E,kBAAC,IAAD,CAAeC,MAAO,QAASC,SAAWP,KAAKL,SAAWa,KAAK,UAC/D,kBAAC,IAAD,CAAeF,MAAO,WAAYC,SAAWP,KAAKD,YAAcS,KAAK,cAE7E,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAM9C,UAAU,yBAAyB+C,GAAI,iBAA7C,uB,GA5EA9C,IAAMC,WCLxB8C,G,MAAc,cAChBhC,EAAaC,EAAQ,IA0EVgC,E,YAtEX,WAAY9B,GAAqB,IAAD,8BAC5B,4CAAMA,KASVC,SAVgC,uCAUrB,WAAOC,GAAP,qBAAAC,EAAA,yDACPD,EAAEI,iBAEKyB,EAAQ,EAAKxB,MAAbwB,KAHA,wDASDC,EAAW,IAAIC,UAEZC,OAAO,QAAQH,IAEpBrC,EAASD,KACNE,QAAQ,gBAAkB,sBAd1B,UAgBS,EAAKK,MAAMZ,cAAcI,KAAKqC,EAAaG,EAAUtC,GAhB9D,QAgBHc,EAhBG,OAkBP,EAAKJ,SAAS,CACV+B,SAAU3B,EAAIb,QAAQ,gBAnBnB,4CAVqB,wDAkChC+B,SAAW,SAACxB,GACR,IAAI6B,EAAoB,KACrB7B,EAAEa,QAAUb,EAAEa,OAAOqB,OAASlC,EAAEa,OAAOqB,MAAMnB,OAAS,IACrDc,EAAO7B,EAAEa,OAAOqB,MAAM,IAG1B,EAAKhC,SAAS,CAAC2B,UAtCf,EAAKxB,MAAQ,CACT4B,SAAU,EAAKnC,MAAMmC,SACrBJ,KAAM,KACNzD,MAAO,MAEXgB,QAAQC,IAAI,EAAKS,OAPW,E,sEA2CtB,IAAD,EAC0CmB,KAAKnB,MAD/C,IACEnB,iBADF,SACqBsD,EADrB,EACqBA,SAAaf,EADlC,wCAECiB,EAAclB,KAAKZ,MAAM4B,UAAYA,EAErCd,EAAUxB,EAAW,UAAWhB,GAEtC,OACQ,kBAAC,IAAD,eAAMA,UAAWwC,GAAaD,GAC1B,kBAAC,IAAKkB,OAAN,KACI,kBAAC,IAAKC,MAAN,oBAEJ,kBAAC,IAAKC,KAAN,KACI,oCACCH,GAAe,yBAAKxD,UAAW,oBACX4D,IAAG,uCAAkCJ,GAAeK,IAAK,YAE9E,kBAAC,IAAKC,UAAN,CAAiBjB,SAAUP,KAAKO,aAGpC,kBAAC,IAAKkB,OAAN,KACI,kBAAC,IAAD,CAAQC,QAAS1B,KAAKlB,SAAUpB,UAAW,yBAA3C,sB,GAjEEC,IAAMC,WCJ1B+D,EAAY,aACGC,E,YACjB,WAAY/C,GAAoB,IAAD,8BAC3B,4CAAMA,KAQVgD,kBAT+B,sBASX,4BAAA7C,EAAA,sEACG,EAAKH,MAAMZ,cAAcV,IAAIoE,EAAWrD,KAD3C,OACVJ,EADU,OAGhB,EAAKe,SAAS,CACVC,SAAS,EACT4C,WAAY5D,EAAKA,KAAK4D,WACtBC,KAAM7D,EAAKA,KAAK6D,OANJ,2CATW,EAmB/BC,OAAS,WACL,OAAO,kBAAC,IAAD,KACH,kBAAC,IAAKb,OAAN,KACI,kBAAC,IAAKC,MAAN,4BAEJ,kBAAC,IAAKC,KAAN,KAEQ,EAAKjC,MAAMF,QAAU,kBAAC,EAAD,MAAY,oCAC7B,kBAAC,IAAD,CACI+C,MAAM,MACNC,KAAK,QACLC,OAAQ,oCAAG,EAAK/C,MAAM0C,WAAWM,WAAzB,IAAqC,oDAC7CC,OAAM,UAAK,EAAKjD,MAAM2C,KAAKK,WAArB,mBAEV,kBAAC,IAAD,CAAM1E,UAAU,yBAAyB+C,GAAI,WAA7C,mBA/BhB,EAAKrB,MAAQ,CACTF,SAAS,EACT4C,WAAY,EACZC,KAAM,GALiB,E,2BADCpE,IAAMC,WCIpC0E,G,MAAc,gBAyJLC,E,YAtJP,WAAY1D,GAAoB,IAAD,8BAC3B,4CAAMA,KAedC,SAhBmC,uCAgBxB,WAAOC,GAAP,SAAAC,EAAA,sDACPD,EAAEI,iBACF,EAAKF,SAAS,CACVC,SAAS,IAEb,EAAKsD,IAAI,CAAC,YAAe,EAAKpD,MAAMqD,KAAKC,cAAcC,MAAK,WACxD,EAAK1D,SAAS,CAACC,SAAS,OACzB,WACC,EAAKD,SAAS,CAACC,SAAS,OARrB,2CAhBwB,wDA4BnC0D,iBA5BmC,uCA4BhB,WAAO7D,GAAP,SAAAC,EAAA,sDACfD,EAAEI,iBACF,EAAKF,SAAS,CACV4D,iBAAiB,IAErB,EAAKL,IAAI,CAAC,aAAgB,EAAKpD,MAAM0D,YAAa,SAAY,EAAK1D,MAAM2D,aAAc,aAAaJ,MAAK,WACrG,EAAK1D,SAAS,CAAC4D,iBAAiB,OACjC,WACC,EAAK5D,SAAS,CAAC4D,iBAAiB,OARrB,2CA5BgB,wDAwCnChB,kBAxCmC,sBAwCf,8BAAA7C,EAAA,sEACG,EAAKH,MAAMZ,cAAcV,IAAI+E,EAAahE,KAD7C,OACVJ,EADU,OAEVuE,EAAmBvE,EAAKA,KAC9B,EAAKe,SAAS,CAACwD,OAAMvD,SAAS,IAHd,2CAxCe,EA8CnCsD,IA9CmC,uCA8C7B,WAAOtE,GAAP,2BAAAc,EAAA,6DAAqB3B,EAArB,+BAAoC,GAApC,kBACS,EAAKwB,MAAMZ,cAAcuE,IAAIF,EAAYjF,EAAMa,EAAMI,MAD9D,2CA9C6B,wDAkDnC0E,eAAiB,SAACjE,GACd,IAAI+D,EAAc,KACf/D,EAAEa,QAAUb,EAAEa,OAAOC,OAASd,EAAEa,OAAOC,MAAMC,OAAS,IACrDgD,EAAc/D,EAAEa,OAAOC,OAG3B,EAAKZ,SAAS,CAAC6D,iBAxDgB,EA2DnCG,eAAiB,SAAClE,GACd,IAAIgE,EAAc,KACfhE,EAAEa,QAAUb,EAAEa,OAAOC,OAASd,EAAEa,OAAOC,MAAMC,OAAS,IACrDiD,EAAchE,EAAEa,OAAOC,OAG3B,EAAKZ,SAAS,CAAC8D,iBAjEgB,EAoEnCG,eAAiB,SAACnE,GACd,IAAI2D,EAAc,KACf3D,EAAEa,QAAUb,EAAEa,OAAOC,OAASd,EAAEa,OAAOC,MAAMC,OAAS,IACrD4C,EAAc3D,EAAEa,OAAOC,OAG3B,IAAM4C,EAAO,EAAKrD,MAAMqD,KACxBA,EAAKC,YAAcA,EAEnB,EAAKzD,SAAS,CAACwD,UA3EX,EAAKrD,MAAQ,CACTF,SAAS,EACT2D,iBAAiB,EACjBC,YAAa,KACbC,YAAa,KACbN,KAAM,CACFU,GAAI,EACJpF,MAAO,aACP2E,YAAa,KACbU,MAAO,OAXY,E,sEAgFzB,IAAD,OACCX,EAAOzC,KAAKZ,MAAMqD,KAElBC,EAAcD,EAAKC,aAAe,GACxC,OACY,kBAAC,IAAKW,QAAN,CAAchD,MAAM,kBAChB,kBAAC,IAAKiD,IAAN,CAAUC,OAAO,GACb,kBAAC,IAAKC,IAAN,CAAUC,MAAO,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAAC,IAAD,KACI,kBAAC,IAAKxC,OAAN,KACI,kBAAC,IAAKC,MAAN,sBAGHpB,KAAKZ,MAAMF,QAAU,kBAAC,EAAD,MAAY,oCAC1B,kBAAC,IAAKmC,KAAN,CAAW3D,UAAW,OAClB,kBAAC,IAAD,CAAe4C,MAAO,KAAME,KAAK,OAClBoD,UAAU,EAAM/D,MAAO4C,EAAKU,KAC3C,kBAAC,IAAD,CAAe7C,MAAO,QAASE,KAAK,OACrBoD,UAAU,EAAM/D,MAAO4C,EAAK1E,QAC3C,kBAAC,IAAD,CAAeuC,MAAO,cAAeE,KAAK,WAC3BD,SAAUP,KAAKkD,eAAgBrD,MAAO6C,KAEzD,kBAAC,IAAKjB,OAAN,KACI,kBAAC,IAAD,CAAQC,QAAS1B,KAAKlB,SAAUpB,UAAW,yBAA3C,mBAKhB,kBAAC,IAAD,KACI,kBAAC,IAAKyD,OAAN,KACI,kBAAC,IAAKC,MAAN,yBAECpB,KAAKZ,MAAMyD,gBAAkB,kBAAC,EAAD,MAAY,oCACtC,kBAAC,IAAKxB,KAAN,CAAW3D,UAAW,OAClB,kBAAC,IAAD,CAAe4C,MAAO,eAAgBE,KAAK,WAC5BD,SAAUP,KAAKgD,iBAC9B,kBAAC,IAAD,CAAe1C,MAAO,eAAgBE,KAAK,WAC5BD,SAAUP,KAAKiD,kBAElC,kBAAC,IAAKxB,OAAN,KACI,kBAAC,IAAD,CAAQC,QAAS1B,KAAK4C,iBAAkBlF,UAAW,yBAAnD,cAMpB,kBAAC,IAAK8F,IAAN,CAAUC,MAAO,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAAC,EAAD,CAAa1F,cAAe+B,KAAKnB,MAAMZ,cAAe+C,SAAUyB,EAAKW,SAEzE,kBAAC,IAAKI,IAAN,CAAUC,MAAO,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAAC,EAAD,CAAQ1F,cAAe+B,KAAKnB,MAAMZ,gBAClC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQP,UAAU,yBAAyBgE,QAAS,WAChDlE,IACA,EAAKqB,MAAMS,cAAcC,KAAK,iBAFlC,WAMJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQ7B,UAAU,0BAA0BgE,QAAS,WACjD,EAAK7C,MAAMS,cAAcC,KAAK,WADlC,iB,GA5Ib5B,IAAMC,W,oOCH7B,IAAMiG,EAAoB,oBACtBnF,EAAaC,EAAQ,IA2FVmF,E,YAvFX,WAAYjF,GAAqB,IAAD,8BAC5B,4CAAMA,KA6BVC,SA9BgC,uCA8BrB,WAAOC,GAAP,eAAAC,EAAA,sDACPD,EAAEI,iBACF,EAAKF,SAAS,CAACC,SAAS,IAClB6E,EAAS,WAAO,EAAK9E,SAAS,CAACC,SAAS,KAC9C,EAAK8E,kBAAkBrB,MAAK,WACxB7E,EAAS,EAAKsB,MAAMrB,MAAO,EAAKqB,MAAMpB,SAAU,EAAKa,MAAMZ,eAAe0E,MAAK,WAC3E,EAAK9D,MAAMS,cAAcC,KAAK,cAC/BwE,KACJA,GARI,2CA9BqB,wDA0ChCE,QA1CgC,uCA0CtB,WAAOC,GAAP,SAAAlF,EAAA,sEACO,EAAKH,MAAMZ,cAAcV,IAAI,4BAA4B2G,EAAY5F,KAD5E,mFA1CsB,wDA8ChC0F,gBA9CgC,sBA8Cd,oCAAAhF,EAAA,+DACyB,EAAKI,MAArCrB,EADO,EACPA,MAAOC,EADA,EACAA,SAAUmG,EADV,EACUA,YAClBjG,EAAO,CAACH,QAAOC,WAAUmG,eAFjB,kBAGP,EAAKtF,MAAMZ,cAAcI,KAAKwF,EAAmB3F,EAAMI,GAAU,KAH1D,2CA9Cc,EAoDhC8F,cAAgB,SAACC,GACb,OAAO,SAACtF,GACJ,GAAGA,EAAEa,QAAUb,EAAEa,OAAOC,MAAM,CAC1B,IAAIT,E,yVAAK,IAAO,EAAKA,OACrBA,EAAMiF,GAAStF,EAAEa,OAAOC,MACxB,EAAKZ,SAASG,MAvDtB,EAAKA,MAAQ,CACTF,SAAS,EACTnB,MAAO,GACPC,SAAU,GACVmG,YAAa,GACb3E,OAAQ,IAPgB,E,iFAWL,IAAD,OAChB8E,EAAQtE,KAAKnB,MAAMyF,MAEnBJ,EAAcI,GAASA,EAAMC,QAAUD,EAAMC,OAAOJ,YAAeG,EAAMC,OAAOJ,YAAc,KAEjGD,IACClE,KAAKf,SAAS,CAACC,SAAS,IACxBc,KAAKiE,QAAQC,GAAYvB,MAAK,SAACtD,GAC3B,EAAKJ,SAAS,CACVkF,YAAaD,EACbnG,MAAOsB,EAAInB,KAAKsG,UAChBtF,SAAS,OAEd,WACC,EAAKD,SAAS,CAACC,SAAS,U,+BAsC1B,IAAD,EACyFc,KAAKnB,MAD9F,IACEnB,iBADF,SACiFuC,GADjF,EACqBhC,cADrB,EACoCqB,cADpC,EACmDgF,MADnD,EAC0DG,QAD1D,EACmEC,SADnE,2FAGCxE,EAAUxB,EAAW,UAAWhB,GACtC,OACI,oCACI,uCAAKA,UAAWwC,GAAaD,GACxBD,KAAKZ,MAAMF,QAAU,kBAAC,EAAD,MAAY,kBAAC,IAAD,CAAUJ,SAAWkB,KAAKlB,SAAWqB,OAAQ,OAAQC,WAAY,WAAYC,MAAO,qBAC9G,kBAAC,IAAD,CAAeC,MAAO,QAASC,SAAWP,KAAKoE,cAAc,SAAW5D,KAAK,OAAOX,MAAOG,KAAKZ,MAAMrB,QACtG,kBAAC,IAAD,CAAeuC,MAAO,WAAYC,SAAWP,KAAKoE,cAAc,YAAc5D,KAAK,aACnF,kBAAC,IAAD,CAAeF,MAAO,cAAeC,SAAWP,KAAKoE,cAAc,eAAiB5D,KAAK,OAAOX,MAAOG,KAAKZ,MAAM+E,eAG1H,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMzG,UAAU,yBAAyB+C,GAAI,eAA7C,wB,GA/EG9C,IAAMC,WCJ3B0E,G,MAAc,aAyGLqC,E,YAtGX,WAAY9F,GAAoB,IAAD,8BAC3B,4CAAMA,KASVgD,kBAV+B,sBAUX,sBAAA7C,EAAA,sEACV,EAAK4F,YAAY,GADP,2CAVW,EAc/BC,QAAU,SAACC,GACP,EAAK7F,SAAS,CACV6F,OACA5F,SAAS,IAEb,EAAK0F,YAAYE,GAAMnC,MAAK,WACxB,EAAK1D,SAAS,CAACC,SAAS,QApBD,EAwB/B0F,YAxB+B,uCAwBjB,WAAOE,GAAP,mBAAA9F,EAAA,sEACS,EAAKH,MAAMZ,cAAcV,IAAI+E,EAAY,SAASwC,EAAMxG,KADjE,OACJJ,EADI,OAEJ6G,EAA8B7G,EAAKA,KAAK6G,MACxCC,EAAQ9G,EAAKA,KAAK8G,MACxB7G,QAAQC,IAAIF,EAAKA,MACjB,EAAKe,SAAS,CAAC8F,QAAOC,QAAO9F,SAAS,IAL5B,2CAxBiB,sDAE3B,EAAKE,MAAQ,CACTF,SAAS,EACT8F,MAAO,EACPF,KAAM,EACNC,MAAO,IANgB,E,sEAgCrB,IAAD,OACCA,EAAQ/E,KAAKZ,MAAM2F,MAEnBE,EAAgB,oCAClB,6BACI,kBAAC,IAAD,CAAMvH,UAAW,kBAAmB+C,GAAI,YAAxC,mBACA,+BAIR,GAAGT,KAAKZ,MAAMF,QACV,OAAO,kBAAC,IAAKmE,QAAN,CAAchD,MAAM,SACvB,kBAAC,EAAD,MACC4E,GAIT,GAAoB,IAAjBF,EAAMjF,OACL,OAAO,kBAAC,IAAKuD,QAAN,CAAchD,MAAM,SAApB,gDAEF4E,GAGT,IAAMD,EAAQ,GAvBT,WAwBGE,GACJ,OAAGA,EAAI,EACH,WAEDF,EAAMlF,QAAU,EACf,aAEJkF,EAAMzF,KAAK,kBAAC,IAAD,CAAQmC,QAAU,WACzB,EAAKmD,QAAQK,KACbA,KAjCH,EAwBL,IAAI,IAAIA,EAAIlF,KAAKZ,MAAM0F,KAAO,EAAGI,GAAKlF,KAAKZ,MAAM4F,MAAOE,IAAI,UAApDA,IAAoD,eAEpD,SAFoD,YAKpD,SAMR,OACY,kBAAC,IAAK7B,QAAN,CAAchD,MAAM,SAChB,kBAAC,IAAD,KACI,kBAAC,IAAMc,OAAP,KACI,kBAAC,IAAMgE,UAAP,iBACA,kBAAC,IAAMA,UAAP,oBACA,kBAAC,IAAMA,UAAP,eAEJ,kBAAC,IAAM9D,KAAP,KAEK0D,EAAMK,KAAI,SAAC3C,GAAD,OAA8B,kBAAC,IAAMa,IAAP,KACrC,kBAAC,IAAME,IAAP,KACI,kBAAC,IAAI6B,KAAL,KACM,kBAAC,IAAD,CAAKpD,MAAM,QAAQQ,EAAK1E,SAGlC,kBAAC,IAAMyF,IAAP,KAAYf,EAAKC,aACjB,kBAAC,IAAMc,IAAP,KAEQf,EAAKW,OAAS,yBAAK1F,UAAW,UAAW6D,IAAI,UAAUD,KNhG5EjE,EMgGwF,QAAQoF,EAAKW,MN/FlH,2BAAN,OAAkC/F,QAD/B,IAAgBA,OMuGC,6BACK2H,GAEJC,O,GAjGDtH,IAAMC,W,yBC+Bf0H,E,YAlCX,WAAYzG,GAAqB,IAAD,8BAC5B,4CAAMA,KACDO,MAAQ,CACTmG,QAAQ,GAHgB,E,sEAOtB,IPTclI,EOSf,OACKmI,EADL,eACexF,KAAKnB,OAEzB,OAAO,oCACH,kBAAC,IAAKyE,IAAN,CAAUC,OAAO,GACb,kBAAC,IAAKC,IAAN,CAAUC,MAAO,GAAIC,GAAI,GAAIC,GAAI,GAC7B,kBAAC,IAAD,CAAerD,MAAO,cAAesD,UAAU,EAAMpD,KAAK,OAAOX,MAAO2F,EAAOC,QAEnF,kBAAC,IAAKjC,IAAN,CAAUC,MAAO,GAAIC,GAAI,GAAIC,GAAI,GAC7B,kBAAC,IAAD,CAAerD,MAAO,KAAMsD,UAAU,EAAMpD,KAAK,OAAOX,MAAO2F,EAAOhB,cAG9E,kBAAC,IAAKlB,IAAN,CAAUC,OAAO,GACb,kBAAC,IAAKC,IAAN,CAAUC,MAAO,GAAIC,GAAI,GAAIC,GAAI,IAC7B,kBAAC,IAAD,CAAiB+B,MPvBTrI,EOuB2B,iBAAiBmI,EAAOC,KPtBrE,wBAAN,OAA+BpI,IOuBEsI,OAAS,kBAAM,EAAK1G,SAAS,CAACsG,QAAQ,MACnD,kBAAC,IAAD,CAAQ7H,UAAW,eACdsC,KAAKZ,MAAMmG,OAAS,8CAAc,kEAKnD,kC,GA/Ba5H,IAAMC,WCEzBgI,EAAc,cAwELC,E,YApEX,WAAYhH,GAAqB,IAAD,8BAC5B,4CAAMA,KAUVC,SAXgC,uCAWrB,WAAOC,GAAP,eAAAC,EAAA,sDACPD,EAAEI,iBACIjB,EAAO,CAACuC,GAAI,EAAKrB,MAAMrB,OAC7B,EAAKkB,SAAS,CAACC,SAAS,IAExB,EAAKL,MAAMZ,cAAcI,KAAKuH,EAAa1H,EAAMI,KAAaqE,MAAK,WAC/D,EAAKmD,gBACNC,OAAM,WAAK,EAAK9G,SAAS,CAACC,SAAS,OAP/B,2CAXqB,wDAsBhC4G,WAAa,WACT,EAAKjH,MAAMZ,cAAcV,IAAIqI,EAAatH,KAAaqE,MAAK,SAACzE,GACtDA,EAAKA,MACJ,EAAKe,SAAS,CAAC+G,QAAS9H,EAAKA,KAAMgB,SAAS,OAEjD6G,OAAM,WAAK,EAAK9G,SAAS,CAACC,SAAS,QA3BV,EA+BhCS,SAAW,SAACZ,GACR,IAAIhB,EAAQ,GACTgB,EAAEa,QAAUb,EAAEa,OAAOC,OAASd,EAAEa,OAAOC,MAAMC,OAAS,IACrD/B,EAAQgB,EAAEa,OAAOC,OAGrB,EAAKZ,SAAS,CAAClB,WAnCf,EAAKqB,MAAQ,CACTF,SAAS,EACTnB,MAAO,GACPiI,QAAS,GACTxG,OAAQ,IAEZ,EAAKsG,aARuB,E,sEAwCtB,IAAD,EACgC9F,KAAKnB,MADrC,IACEnB,iBADF,SACwBuC,EADxB,6BAECC,EAAU,WAAWxC,EAE3B,OACI,oCACI,uCAAKA,UAAWwC,GAAaD,GACzB,kBAAC,IAAD,CAAUnB,SAAWkB,KAAKlB,SAAWqB,OAAQ,OAAQC,WAAY,WAAYC,MAAO,mBAChF,kBAAC,IAAD,CAAeC,MAAO,eAAgBC,SAAWP,KAAKL,SAAWa,KAAK,WAGtER,KAAKZ,MAAMF,QAAU,kBAAC,EAAD,MAAYc,KAAKZ,MAAM4G,QAAQZ,KAAI,SAACI,GACvD,OAAO,oCAAE,kBAAC,EAAD,CAAYC,KAAMD,EAAOC,KAAMjB,UAAWgB,EAAOhB,gBAGhE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAM/D,GAAI,WAAY/C,UAAU,0BAAhC,4B,GA1DCC,IAAMC,WCNVqI,E,2MAEjBjE,OAAS,WAEL,OACI,kBAAC,IAAD,iBAAW,EAAKnD,MAAhB,CAAuBmD,OAAQ,gBAAG0C,EAAH,EAAGA,SAAH,OACvBpH,IACI,EAAKuB,MAAMqH,SAEX,kBAAC,IAAD,CACIzF,GAAI,CACA0F,SAAU,cACV/G,MAAO,CAAEgH,KAAM1B,W,6BAZL/G,IAAMC,W,yOCc3ByI,G,YAKjB,WAAYxH,GAAoB,IAAD,uBAC3B,4CAAMA,KALAS,mBAIqB,IAFrBrB,mBAEqB,IAgB/BqI,aAAe,SAACC,GACZpI,QAAQC,IAAImI,GACZ,IAAIC,EAAe,uCACfhH,EAAS,GACb,GAAG+G,EAAM9G,UAAY8G,EAAME,SAAWF,EAAM9G,SAASiH,OAAQ,CACzD,IAAMA,EAASH,EAAM9G,SAASiH,OACxBxI,EAAOqI,EAAM9G,SAASvB,KACtByI,EAAMJ,EAAME,QAAQG,YAEtB1I,EAAK2I,mBAAqB3I,EAAK2I,kBAAkBrH,OACjDA,EAAStB,EAAK2I,kBAAkBrH,OAAO4F,KAAI,SAAC0B,GAExC,OADcA,EAAUC,cAAcC,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IACvD,KAAKF,EAAUG,WAG5B/I,EAAKgJ,cACTV,EAAetI,EAAKgJ,cAEJ,MAAXR,EACLF,EAAe,mBAGC,MAAXE,GACkC,IAApCC,EAAIQ,QAAQ,oBACXX,EAAe,qBACfhJ,IACA,EAAK8B,cAAcC,KAAK,gBAGxBiH,EAAe,sBAGH,MAAXE,EACLF,EAAe,kBAEVE,EAAS,MACdF,EAAe,mCAYvB,OARqB,IAAlBhH,EAAOM,QACNN,EAAOD,KAAKiH,GAGhBrI,QAAQC,IAAIoB,GAEZ,EAAK4H,UAAU5H,GAER6H,QAAQC,O,2VAAR,IAAoBf,KAhEA,EAmE/Ba,UAAY,SAAC5H,GACT,EAAKP,SAAS,CAACO,WACf+H,YAAW,WACP,EAAKtI,SAAS,CAACO,OAAQ,OACxB,MAvEwB,EA0E/BwC,OAAS,WACL,IAAMxC,EAAS,EAAKJ,MAAMI,OAC1B,OAAO,kBAAC,IAAD,CAAQiF,QAAS,EAAKnF,eAC7B,kBAAC,IAAD,KACI,kBAAC,IAAKkI,KAAN,KAEQhI,EAAOM,OAAS,GAAK,yBAAKpC,UAAW,mBAE7B8B,EAAO4F,KAAI,SAACmB,GACR,OAAO,kBAAC,IAAD,CAAO/F,KAAK,SAAS0B,KAAK,kBAC5BqE,OAMrB,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAclJ,KAAM,IAAKoK,OAAO,GAC5B,kBAAC,EAAD,CAAUnI,cAAe,EAAKA,cAAerB,cAAe,EAAKA,iBAErE,kBAAC,IAAD,CAAOZ,KAAM,eACT,kBAAC,EAAD,CAAWiC,cAAe,EAAKA,cAAerB,cAAe,EAAKA,iBAEtE,kBAAC,IAAD,CAAOZ,KAAM,6BAA8B2E,OAAQ,SAACnD,GAChD,OAAO,kBAAC,EAAD,eAAcS,cAAe,EAAKA,cAAerB,cAAe,EAAKA,eAAmBY,OAGnG,kBAAC,IAAD,CAAOxB,KAAM,iBACT,kBAAC,EAAD,CAAciC,cAAe,EAAKA,cAAerB,cAAe,EAAKA,iBAEzE,kBAAC,EAAD,CAAcZ,KAAM,YAChB,kBAAC,EAAD,CAAUiC,cAAe,EAAKA,cAAerB,cAAe,EAAKA,iBAErE,kBAAC,EAAD,CAAcZ,KAAM,SAChB,kBAAC,EAAD,CAAWiC,cAAe,EAAKA,cAAerB,cAAe,EAAKA,iBAEtE,kBAAC,EAAD,CAAcZ,KAAM,WAChB,kBAAC,EAAD,CAAYY,cAAe,EAAKA,iBAEpC,kBAAC,IAAD,CAAOZ,KAAK,KACR,uDAA4B,kBAAC,IAAD,CAAMoD,GAAI,KAAV,mBA/G5C,IAAMxC,EAAgByJ,IAAMC,OAAO,CAC/BC,QAAS,6BAJc,OAO3B3J,EAAc4J,aAAapI,SAASqI,KAAI,SAACvJ,GAAD,OAAYA,KAAQ,SAAAgI,GAAK,OAAI,EAAKD,aAAaC,MAEvF,EAAKtI,cAAgBA,EACrB,EAAKqB,cAAgByI,cACrB,EAAK3I,MAAQ,CACTI,OAAQ,IAZe,E,2BALD7B,IAAMC,WCNzBoK,I,MATO,WACpB,OACE,yBAAKtK,UAAU,OACX,kBAAC,GAAD,CAAMA,UAAW,kBCGLuK,QACW,cAA7BC,OAAOxD,SAASyD,UAEe,UAA7BD,OAAOxD,SAASyD,UAEhBD,OAAOxD,SAASyD,SAAS7D,MACvB,2DCZN8D,IAASpG,OAAO,kBAAC,GAAD,MAASqG,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9F,MAAK,SAAA+F,GACjCA,EAAaC,kB","file":"static/js/main.ba154b20.chunk.js","sourcesContent":["import Cookies from 'universal-cookie';\nconst cookies = new Cookies();\nexport function setToken(token: string | null) {\n    cookies.set('token', token, { path: '/' });\n}\n\nexport function getToken(): string | null {\n    return cookies.get('token');\n}\n\nexport function removeToken() {\n    cookies.set('token', \"\", { path: '/' });\n}","import React from 'react';\nimport './styles.css';\n\nclass Loader extends React.Component{\n    render() {\n        return <div className={\"loader-element\"}> </div>;\n    }\n}\n\nexport default Loader;","import {getToken} from './TokenStorage';\nimport {AxiosInstance} from \"axios\";\n\nconst LOGIN_PATH = \"/api/auth/login\";\n\nexport function getUrl(path: string) {\n    return `http://symfony.localhost${path}`\n}\n\nexport function getInnerUrl(path: string) {\n    return `http://localhost:4000${path}`\n}\n\nexport function tryLogin(email: string, password: string, axiosInstance: AxiosInstance) {\n    const data = {email, password};\n    console.log(data);\n    return axiosInstance.post(LOGIN_PATH, data, getConfig(false));\n}\n\nexport function getConfig(token: string | null | false = null) {\n    let config = {\n        headers: {\n            'content-type': 'application/json',\n        }\n    };\n\n    const tokenRes = (token === null) ? getToken() : token;\n\n    if(tokenRes){\n        config.headers = {...config.headers, ...{\"authorization\":`Bearer ${tokenRes}`}};\n    }\n\n    return config;\n}","import React, {ChangeEvent, FormEvent} from 'react';\n\nimport { FormCard, FormTextInput, Card} from \"tabler-react\";\nimport {Link} from \"react-router-dom\";\nimport \"tabler-react/dist/Tabler.css\";\n\nimport {setToken} from \"../../services/TokenStorage\"\nimport Loader from \"../Loader\";\n\nimport types from './types';\nimport \"./styles.css\";\nimport {tryLogin} from \"../../services/Connect\";\n\nlet classNames = require('classnames');\n\nclass LoginPage extends React.Component<types.Props, types.State>{\n\n    constructor(props: types.Props) {\n        super(props);\n        this.state = {\n            email: this.props.email || \"\",\n            password: this.props.password || \"\",\n            errors: [],\n            loading: false\n        };\n    }\n\n    onSubmit = async (e: FormEvent) => {\n        this.setState({loading: true})\n        e.preventDefault();\n        try{\n            const {email, password} = this.state;\n            let res = await tryLogin(email, password, this.props.axiosInstance);\n            if(!res.data.token){\n                let errors = [];\n                errors.push(\"Invalid login or password.\");\n                this.setState({errors});\n            }\n            else{\n                console.log(res);\n                console.log(res.data);\n                const token = res.data.token;\n                setToken(token);\n\n                const history = this.props.customHistory;\n                history.push(\"/user/me\");\n            }\n        }\n        catch (e) {\n            if(e.response && e.response.statusText){\n                console.log(e);\n            }\n\n        }\n        this.setState({loading:false})\n\n    }\n\n    setEmail = (e: ChangeEvent<HTMLInputElement>) => {\n        let email = \"\";\n        if(e.target && e.target.value && e.target.value.length > 0){\n            email = e.target.value;\n        }\n\n        this.setState({email});\n    }\n\n    setPassword = (e: ChangeEvent<HTMLInputElement>) => {\n        let password = \"\";\n        if(e.target && e.target.value && e.target.value.length > 0){\n            password = e.target.value;\n        }\n\n        this.setState({password});\n    }\n\n    render() {\n        const {className = false, customHistory, ...rest} = this.props;\n        const classes = classNames(\"wrapper\", className);\n\n        if(this.state.loading){\n            return <Loader/>;\n        }\n        return (\n            <>\n                <div className={classes} {...rest}>\n                    <FormCard onSubmit={ this.onSubmit } method={\"POST\"} buttonText={\"Login\"}  title={\"Login page\"}>\n                            <FormTextInput label={\"Email\"} onChange={ this.setEmail } type=\"email\" />\n                            <FormTextInput label={\"Password\"} onChange={ this.setPassword } type=\"password\" />\n                    </FormCard>\n                    <Card>\n                        <Link className=\"btn btn-sm btn-success\" to={\"/registration\"}>\n                            Registration\n                        </Link>\n                    </Card>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default LoginPage;","import React, {ChangeEvent, FormEvent} from 'react';\n\nimport { Form, Button, Card} from \"tabler-react\";\nimport \"tabler-react/dist/Tabler.css\";\n\nimport {getConfig} from \"../../services/Connect\";\n\nimport types from './types';\nimport \"./styles.css\";\n\nconst UPLOAD_PATH = \"/api/photo\";\nlet classNames = require('classnames');\n\nclass PhotoUpload extends React.Component<types.Props, types.State>{\n\n    constructor(props: types.Props) {\n        super(props);\n        this.state = {\n            photoSrc: this.props.photoSrc,\n            file: null,\n            token: null\n        };\n        console.log(this.props);\n    }\n\n    onSubmit = async (e: FormEvent) => {\n        e.preventDefault();\n\n        const {file} = this.state;\n\n        if(!file){\n            return;\n        }\n\n        const formData = new FormData();\n\n        formData.append('photo',file);\n\n        let config = getConfig();\n        config.headers[\"content-type\"] = 'multipart/form-data';\n\n        let res = await this.props.axiosInstance.post(UPLOAD_PATH, formData, config);\n\n        this.setState({\n            photoSrc: res.headers[\"x-location\"]\n            });\n\n    }\n\n    onChange = (e: ChangeEvent<HTMLInputElement>) => {\n        let file: File | null = null;\n        if(e.target && e.target.files && e.target.files.length > 0){\n            file = e.target.files[0];\n        }\n\n        this.setState({file});\n    }\n\n    render() {\n        const {className = false, photoSrc, ...rest} = this.props;\n        const photoSrcRes = this.state.photoSrc || photoSrc;\n\n        const classes = classNames(\"wrapper\", className);\n\n        return (\n                <Card className={classes} {...rest}>\n                    <Card.Header>\n                        <Card.Title>Your Photo</Card.Title>\n                    </Card.Header>\n                    <Card.Body>\n                        <>\n                        {photoSrcRes && <img className={\"PhotoUpload-photo\"}\n                                             src={`http://symfony.localhost/img/${photoSrcRes}`} alt={\"Profile\"}/>}\n\n                        <Form.FileInput  onChange={this.onChange}/>\n                        </>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button onClick={this.onSubmit} className={\"btn-block btn-primary\"}>Upload Photo</Button>\n                    </Card.Footer>\n                </Card>\n        );\n    }\n}\n\nexport default PhotoUpload;","import React from 'react';\nimport {Card, StampCard} from \"tabler-react\";\nimport {Link} from \"react-router-dom\";\n\nimport Loader from \"../Loader\";\nimport {getConfig} from \"../../services/Connect\";\n\nimport types from \"./types\";\n\nconst STAT_PATH = \"/api/stat/\";\nexport default class Invite extends React.Component<types.Props, types.State>{\n    constructor(props: types.Props){\n        super(props);\n        this.state = {\n            loading: true,\n            registered: 0,\n            wait: 0\n        };\n    }\n\n    componentDidMount = async () => {\n        const data = await this.props.axiosInstance.get(STAT_PATH, getConfig());\n\n        this.setState({\n            loading: false,\n            registered: data.data.registered,\n            wait: data.data.wait\n        });\n    }\n\n    render = () => {\n        return <Card>\n            <Card.Header>\n                <Card.Title>Statistics invites</Card.Title>\n            </Card.Header>\n            <Card.Body>\n                {\n                    this.state.loading ? <Loader/> : <>\n                        <StampCard\n                            color=\"red\"\n                            icon=\"users\"\n                            header={<>{this.state.registered.toString()} <small>Registered users</small></>}\n                            footer={`${this.state.wait.toString()} waited users`}\n                        />\n                        <Link className=\"btn btn-sm btn-success\" to={\"/invite\"}>\n                            Invite User\n                        </Link>\n                    </>\n                }\n\n            </Card.Body>\n        </Card>;\n    }\n}","import React, {ChangeEvent, FormEvent} from 'react';\nimport { Card, FormTextInput, Page, Grid, Button} from \"tabler-react\";\nimport \"tabler-react/dist/Tabler.css\";\n\nimport PhotoUpload from \"../PhotoUpload\";\nimport Invite from \"../Invite\";\nimport Loader from '../Loader';\n\nimport {removeToken} from \"../../services/TokenStorage\";\n\nimport types from './types';\nimport \"./styles.css\";\nimport {getConfig} from \"../../services/Connect\";\n\nconst UPDATE_PATH = \"/api/user/me\";\n\nclass UserPage extends React.Component<types.Props, types.State>{\n        constructor(props: types.Props){\n            super(props);\n            this.state = {\n                loading: true,\n                loadingPassword: false,\n                oldPassword: null,\n                newPassword: null,\n                user: {\n                    id: 0,\n                    email: \"loading...\",\n                    description: null,\n                    photo: null\n                }\n            }\n        }\n\n    onSubmit = async (e: FormEvent) => {\n        e.preventDefault();\n        this.setState({\n            loading: true\n        });\n        this.put({\"description\": this.state.user.description}).then(() => {\n            this.setState({loading: false});\n        }, () => {\n            this.setState({loading: false});\n        })\n    }\n\n    onSubmitPassword = async (e: FormEvent) => {\n        e.preventDefault();\n        this.setState({\n            loadingPassword: true\n        });\n        this.put({\"old_password\": this.state.oldPassword, \"password\": this.state.newPassword}, \"/password\").then(() => {\n            this.setState({loadingPassword: false});\n        }, () => {\n            this.setState({loadingPassword: false});\n        })\n    }\n\n    componentDidMount = async () => {\n        const data = await this.props.axiosInstance.get(UPDATE_PATH, getConfig());\n        const user: types.User = data.data;\n        this.setState({user, loading: false});\n    }\n\n    put = async (data: object, path: string = \"\") => {\n            return this.props.axiosInstance.put(UPDATE_PATH+path, data, getConfig());\n    }\n\n    setOldPassword = (e: ChangeEvent<HTMLInputElement>) => {\n        let oldPassword = null;\n        if(e.target && e.target.value && e.target.value.length > 0){\n            oldPassword = e.target.value;\n        }\n\n        this.setState({oldPassword});\n    }\n\n    setNewPassword = (e: ChangeEvent<HTMLInputElement>) => {\n        let newPassword = null;\n        if(e.target && e.target.value && e.target.value.length > 0){\n            newPassword = e.target.value;\n        }\n\n        this.setState({newPassword});\n    }\n\n    setDescription = (e: ChangeEvent<HTMLInputElement>) => {\n        let description = null;\n        if(e.target && e.target.value && e.target.value.length > 0){\n            description = e.target.value;\n        }\n\n        const user = this.state.user;\n        user.description = description;\n\n        this.setState({user});\n    }\n\n    render() {\n        const user = this.state.user;\n\n        const description = user.description || \"\";\n        return (\n                    <Page.Content title=\"Home User Page\">\n                        <Grid.Row cards={true}>\n                            <Grid.Col width={12} sm={8} lg={4}>\n                                <Card>\n                                    <Card.Header>\n                                        <Card.Title>Your Profile</Card.Title>\n                                    </Card.Header>\n\n                                    {this.state.loading ? <Loader/> : <>\n                                            <Card.Body className={\"p-6\"}>\n                                                <FormTextInput label={\"Id\"} type=\"text\"\n                                                               readOnly={true} value={user.id}/>\n                                                <FormTextInput label={\"Email\"} type=\"text\"\n                                                               readOnly={true} value={user.email}/>\n                                                <FormTextInput label={\"Description\"} type=\"textarea\"\n                                                               onChange={this.setDescription} value={description}/>\n                                            </Card.Body>\n                                            <Card.Footer>\n                                                <Button onClick={this.onSubmit} className={\"btn-block btn-primary\"}>Save Profile</Button>\n                                            </Card.Footer>\n                                        </>\n                                    }\n                                </Card>\n                                <Card>\n                                    <Card.Header>\n                                        <Card.Title>Change Password</Card.Title>\n                                    </Card.Header>\n                                        {this.state.loadingPassword ? <Loader/> : <>\n                                            <Card.Body className={\"p-6\"}>\n                                                <FormTextInput label={\"Old Password\"} type=\"password\"\n                                                               onChange={this.setOldPassword}/>\n                                                <FormTextInput label={\"New Password\"} type=\"password\"\n                                                               onChange={this.setNewPassword}/>\n                                            </Card.Body>\n                                            <Card.Footer>\n                                                <Button onClick={this.onSubmitPassword} className={\"btn-block btn-primary\"}>Change</Button>\n                                            </Card.Footer>\n                                        </>\n                                }\n                                </Card>\n                            </Grid.Col>\n                            <Grid.Col width={12} sm={8} lg={4}>\n                                <PhotoUpload axiosInstance={this.props.axiosInstance} photoSrc={user.photo}/>\n                            </Grid.Col>\n                            <Grid.Col width={12} sm={8} lg={4}>\n                                <Invite axiosInstance={this.props.axiosInstance} />\n                                <Card>\n                                    <Button className=\"btn btn-block btn-dark\" onClick={() => {\n                                        removeToken();\n                                        this.props.customHistory.push(\"/auth/login\");\n                                    }}>Logout</Button>\n                                </Card>\n\n                                <Card>\n                                    <Button className=\"btn btn-block btn-white\" onClick={() => {\n                                        this.props.customHistory.push(\"/user\");\n                                    }}>Users</Button>\n                                </Card>\n                            </Grid.Col>\n                        </Grid.Row>\n                    </Page.Content>\n        );\n    }\n}\n\nexport default UserPage;","import React, {ChangeEvent, FormEvent} from 'react';\nimport {Link} from \"react-router-dom\";\n\nimport { FormCard, FormTextInput, Card} from \"tabler-react\";\nimport \"tabler-react/dist/Tabler.css\";\n\nimport {getConfig, tryLogin} from \"../../services/Connect\";\n\nimport types from './types';\nimport \"./styles.css\";\nimport Loader from \"../Loader\";\n\n\nconst REGISTRATION_PATH = \"/api/registration\";\nlet classNames = require('classnames');\n\nclass RegisterPage extends React.Component<types.Props, types.State>{\n\n    constructor(props: types.Props) {\n        super(props);\n        this.state = {\n            loading: false,\n            email: \"\",\n            password: \"\",\n            invite_code: \"\",\n            errors: []\n        };\n    }\n\n    componentDidMount(): void {\n        const match = this.props.match;\n\n        const inviteCode = (match && match.params && match.params.invite_code) ? match.params.invite_code : null;\n\n        if(inviteCode){\n            this.setState({loading: true});\n            this.getData(inviteCode).then((res) => {\n                this.setState({\n                    invite_code: inviteCode,\n                    email: res.data.for_email,\n                    loading: false\n                });\n            }, () => {\n                this.setState({loading: false});\n            });\n        }\n    }\n\n    onSubmit = async (e: FormEvent) => {\n        e.preventDefault();\n        this.setState({loading: true});\n        const loaded = () => {this.setState({loading: false});}\n        this.tryRegistration().then(() => {\n            tryLogin(this.state.email, this.state.password, this.props.axiosInstance).then(() => {\n                this.props.customHistory.push(\"/user/me\");\n            }, loaded)\n        }, loaded);\n\n    }\n\n    getData = async (inviteCode: string) => {\n        return await this.props.axiosInstance.get(\"/api/registration_invite/\"+inviteCode, getConfig());\n    }\n\n    tryRegistration = async () => {\n        const {email, password, invite_code} = this.state;\n        const data = {email, password, invite_code};\n        return this.props.axiosInstance.post(REGISTRATION_PATH, data, getConfig(false));\n    }\n\n    setStateField = (field: 'email' | 'password' | 'invite_code') => {\n        return (e: ChangeEvent<HTMLInputElement>) => {\n            if(e.target && e.target.value){\n                let state = {...this.state};\n                state[field] = e.target.value;\n                this.setState(state);\n            }\n\n        }\n    }\n\n    render() {\n        const {className = false, axiosInstance, customHistory, match, history, location,  ...rest} = this.props;\n\n        const classes = classNames(\"wrapper\", className);\n        return (\n            <>\n                <div className={classes} {...rest}>\n                    {this.state.loading ? <Loader/> : <FormCard onSubmit={ this.onSubmit } method={\"POST\"} buttonText={\"Register\"} title={\"Registration page\"}>\n                            <FormTextInput label={\"Email\"} onChange={ this.setStateField('email') } type=\"text\" value={this.state.email}/>\n                            <FormTextInput label={\"Password\"} onChange={ this.setStateField('password') } type=\"password\" />\n                            <FormTextInput label={\"Invite Code\"} onChange={ this.setStateField('invite_code') } type=\"text\" value={this.state.invite_code}/>\n                    </FormCard>\n                    }\n                    <Card>\n                        <Link className=\"btn btn-sm btn-success\" to={\"/auth/login\"}>\n                            Back to login\n                        </Link>\n                    </Card>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default RegisterPage;","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport \"tabler-react/dist/Tabler.css\";\nimport {Page, Tag, Table, Button} from \"tabler-react\";\n\nimport Loader from \"../Loader\";\nimport {getConfig, getUrl} from \"../../services/Connect\";\nimport UserPageTypes from \"../UserPage/types\";\n\nimport \"./styles.css\";\nimport types from './types';\n\nconst UPDATE_PATH = \"/api/user\";\n\nclass UsersPage extends React.Component<types.Props, types.State>{\n    constructor(props: types.Props){\n        super(props);\n        this.state = {\n            loading: true,\n            pages: 1,\n            page: 1,\n            users: []\n        }\n    }\n\n    componentDidMount = async () => {\n        await this.updateUsers(1);\n    }\n\n    setPage = (page: number) => {\n        this.setState({\n            page,\n            loading: true\n        });\n        this.updateUsers(page).then(() => {\n            this.setState({loading: false});\n        });\n    }\n\n    updateUsers = async (page: number) => {\n        const data = await this.props.axiosInstance.get(UPDATE_PATH+\"?page=\"+page, getConfig());\n        const users: UserPageTypes.User[] = data.data.users;\n        const pages = data.data.pages;\n        console.log(data.data);\n        this.setState({users, pages, loading: false});\n    }\n\n    render() {\n        const users = this.state.users;\n\n        const BackToProfile = <>\n            <div>\n                <Link className={\"btn btn-success\"} to={'/user/me'}>Back To Profile</Link>\n                <br/>\n            </div>\n        </>\n\n        if(this.state.loading){\n            return <Page.Content title=\"Users\">\n                <Loader/>\n                {BackToProfile}\n            </Page.Content>\n        }\n\n        if(users.length === 0){\n            return <Page.Content title=\"Users\">\n                Cannot find some user, please try again later\n                {BackToProfile}\n            </Page.Content>\n        }\n        const pages = [];\n        for(let i = this.state.page - 5; i <= this.state.pages; i++){\n            if(i < 1){\n                continue;\n            }\n            if(pages.length >= 7){\n                break;\n            }\n            pages.push(<Button onClick={ () => {\n                this.setPage(i);\n            }}>{i}</Button>);\n        }\n        return (\n                    <Page.Content title=\"Users\">\n                        <Table>\n                            <Table.Header>\n                                <Table.ColHeader>Username</Table.ColHeader>\n                                <Table.ColHeader>Description</Table.ColHeader>\n                                <Table.ColHeader>Photo</Table.ColHeader>\n                            </Table.Header>\n                            <Table.Body>\n\n                                {users.map((user: UserPageTypes.User) => <Table.Row>\n                                    <Table.Col>\n                                        <Tag.List>\n                                              <Tag color=\"blue\">{user.email}</Tag>\n                                         </Tag.List>\n                                    </Table.Col>\n                                    <Table.Col>{user.description}</Table.Col>\n                                    <Table.Col>\n                                        {\n                                            user.photo && <img className={\"big-img\"} alt=\"Profile\" src={getUrl(\"/img/\"+user.photo)}/>\n                                        }\n                                    </Table.Col>\n                                </Table.Row>)}\n\n                            </Table.Body>\n                        </Table>\n                        <div>\n                            {pages}\n                        </div>\n                        {BackToProfile}\n                    </Page.Content>\n        );\n    }\n}\n\nexport default UsersPage;","import React from 'react';\nimport {FormTextInput, Grid, Button} from \"tabler-react\";\nimport \"tabler-react/dist/Tabler.css\";\nimport CopyToClipboard from 'react-copy-to-clipboard';\n\nimport {getInnerUrl} from \"../../../services/Connect\";\n\nimport types from './types';\n\nclass InviteCard extends React.Component<types.Props, types.State>{\n\n    constructor(props: types.Props) {\n        super(props);\n        this.state = {\n            copied: false\n        };\n    }\n\n    render() {\n        const {...invite} = this.props;\n\n        return <>\n            <Grid.Row cards={true}>\n                <Grid.Col width={12} sm={12} lg={6}>\n                    <FormTextInput label={\"Invite Code\"} readOnly={true} type=\"text\" value={invite.code} />\n                </Grid.Col>\n                <Grid.Col width={12} sm={12} lg={6}>\n                    <FormTextInput label={\"To\"} readOnly={true} type=\"text\" value={invite.for_email} />\n                </Grid.Col>\n            </Grid.Row>\n            <Grid.Row cards={true}>\n                <Grid.Col width={12} sm={12} lg={12}>\n                    <CopyToClipboard text={getInnerUrl(\"/registration/\"+invite.code)}\n                                     onCopy={ () => this.setState({copied: true}) }>\n                        <Button className={\"btn-primary\"}>\n                            {this.state.copied ? <>Copied</> : <>Copy registration link</>}\n                        </Button>\n                    </CopyToClipboard>\n                </Grid.Col>\n            </Grid.Row>\n            <br/>\n        </>\n    }\n}\n\nexport default InviteCard;","import React, {ChangeEvent, FormEvent} from 'react';\nimport {Link} from \"react-router-dom\";\nimport { FormCard, FormTextInput, Card} from \"tabler-react\";\nimport \"tabler-react/dist/Tabler.css\";\n\nimport {getConfig} from \"../../services/Connect\";\nimport Loader from '../Loader';\n\nimport types from './types';\nimport InviteCard from \"../InvitePage/InviteCard\";\n\nconst INVITE_PATH = \"/api/invite\";\n\nclass InvitePage extends React.Component<types.Props, types.State>{\n\n    constructor(props: types.Props) {\n        super(props);\n        this.state = {\n            loading: true,\n            email: \"\",\n            invites: [],\n            errors: []\n        };\n        this.updateData();\n    }\n\n    onSubmit = async (e: FormEvent) => {\n        e.preventDefault();\n        const data = {to: this.state.email};\n        this.setState({loading: true});\n\n        this.props.axiosInstance.post(INVITE_PATH, data, getConfig()).then(() => {\n            this.updateData();\n        }).catch(()=>{this.setState({loading: false});})\n\n    }\n\n    updateData = () => {\n        this.props.axiosInstance.get(INVITE_PATH, getConfig()).then((data) => {\n            if(data.data){\n                this.setState({invites: data.data, loading: false});\n            }\n        }).catch(()=>{this.setState({loading: false});});\n    }\n\n\n    setEmail = (e: ChangeEvent<HTMLInputElement>) => {\n        let email = \"\";\n        if(e.target && e.target.value && e.target.value.length > 0){\n            email = e.target.value;\n        }\n\n        this.setState({email});\n    }\n\n    render() {\n        const {className = false, ...rest} = this.props;\n        const classes = \"wrapper \"+className;\n\n        return (\n            <>\n                <div className={classes} {...rest}>\n                    <FormCard onSubmit={ this.onSubmit } method={\"POST\"} buttonText={\"Generate\"} title={\"Generate invite\"}>\n                        <FormTextInput label={\"Person Email\"} onChange={ this.setEmail } type=\"email\" />\n                    </FormCard>\n                    {\n                        this.state.loading ? <Loader/> : this.state.invites.map((invite) => {\n                          return <><InviteCard code={invite.code} for_email={invite.for_email}/></>\n                        })\n                    }\n                    <Card>\n                        <Link to={\"/user/me\"} className=\"btn btn-sm btn-success\" >\n                            Back to user page\n                        </Link>\n                    </Card>\n                </div>\n\n\n            </>\n        );\n    }\n}\n\nexport default InvitePage;","import React from 'react';\nimport {Route, Redirect} from \"react-router\";\n\nimport {getToken} from \"../../services/TokenStorage\";\n\nimport types from \"./types\";\n\nexport default class PrivateRoute extends React.Component<types.Props>{\n\n    render = () => {\n\n        return (\n            <Route {...this.props} render={({ location }) =>\n                    getToken() ? (\n                        this.props.children\n                    ) : (\n                        <Redirect\n                            to={{\n                                pathname: \"/auth/login\",\n                                state: { from: location }\n                            }}\n                        />\n                    )\n                }\n            />\n        );\n    }\n}","import React from 'react';\nimport {Router, Switch} from \"react-router\";\nimport {Link, Route} from \"react-router-dom\";\nimport { Page, Alert } from \"tabler-react\";\nimport \"tabler-react/dist/Tabler.css\";\nimport axios, {AxiosInstance} from \"axios\";\nimport { createBrowserHistory, History } from 'history';\n\n\nimport LoginPage from \"../LoginPage\"\nimport UserPage from \"../UserPage\"\nimport RegisterPage from \"../RegisterPage\"\nimport UsersPage from \"../UsersPage\";\nimport InvitePage from \"../InvitePage\";\n\nimport {removeToken} from \"../../services/TokenStorage\";\nimport PrivateRoute from \"../PrivateRoute\";\n\nimport \"./styles.css\";\nimport types from \"./types\";\n\nexport default class Root extends React.Component<types.Props, types.State>{\n    protected customHistory: History;\n\n    protected axiosInstance: AxiosInstance;\n\n    constructor(props: types.Props){\n        super(props);\n\n        const axiosInstance = axios.create({\n            baseURL: 'http://symfony.localhost'\n        })\n\n        axiosInstance.interceptors.response.use((config) => config, error => this.errorHandler(error));\n\n        this.axiosInstance = axiosInstance;\n        this.customHistory = createBrowserHistory();\n        this.state = {\n            errors: []\n        };\n    }\n\n    errorHandler = (error: any) => {\n        console.log(error);\n        let errorMessage = \"Cannot do request, please try again.\";\n        let errors = [];\n        if(error.response && error.request && error.response.status) {\n            const status = error.response.status;\n            const data = error.response.data;\n            const url = error.request.responseURL;\n\n            if (data.error_description && data.error_description.errors) {\n                errors = data.error_description.errors.map((errorItem: any) => {\n                    const field = errorItem.property_path.replace(\"[\", \"\").replace(\"]\", \"\");\n                    return field+\": \"+errorItem.message\n                });\n            }\n            else if(data.error_message){\n                errorMessage = data.error_message;\n            }\n            else if (status === 400) {\n                errorMessage = \"Validation error\";\n\n            }\n            else if (status === 401) {\n                if(url.indexOf(\"/api/auth/login\") === -1){\n                    errorMessage = \"Please login again\";\n                    removeToken();\n                    this.customHistory.push('/auth/login');\n                }\n                else{\n                    errorMessage = \"Invalid credentials\";\n                }\n            }\n            else if (status === 413){\n                errorMessage = \"Too big request\"\n            }\n            else if (status > 500){\n                errorMessage = \"Internal error please try again\"\n            }\n        }\n\n        if(errors.length === 0){\n            errors.push(errorMessage);\n        }\n\n        console.log(errors);\n\n        this.setErrors(errors);\n\n        return Promise.reject({ ...error })\n    }\n\n    setErrors = (errors: any) => {\n        this.setState({errors});\n        setTimeout(() => {\n            this.setState({errors: []});\n        }, 5000);\n    }\n\n    render = () => {\n        const errors = this.state.errors;\n        return <Router history={this.customHistory}>\n        <Page>\n            <Page.Main>\n                {\n                    errors.length > 0 && <div className={\"errorsContainer\"}>\n                        {\n                            errors.map((error: string) => {\n                                return <Alert type=\"danger\" icon=\"alert-triangle\">\n                                    {error}\n                                </Alert>\n                            })\n                        }\n                    </div>\n                }\n                <Switch>\n                    <PrivateRoute path={\"/\"} exact={true}>\n                        <UserPage customHistory={this.customHistory} axiosInstance={this.axiosInstance}/>\n                    </PrivateRoute>\n                    <Route path={\"/auth/login\"}>\n                        <LoginPage customHistory={this.customHistory} axiosInstance={this.axiosInstance}/>\n                    </Route>\n                    <Route path={\"/registration/:invite_code\"} render={(props) => {\n                        return <RegisterPage customHistory={this.customHistory} axiosInstance={this.axiosInstance} {...props}/>\n\n                    }}/>\n                    <Route path={\"/registration\"}>\n                        <RegisterPage customHistory={this.customHistory} axiosInstance={this.axiosInstance}/>\n                    </Route>\n                    <PrivateRoute path={\"/user/me\"}>\n                        <UserPage customHistory={this.customHistory} axiosInstance={this.axiosInstance}/>\n                    </PrivateRoute>\n                    <PrivateRoute path={\"/user\"}>\n                        <UsersPage customHistory={this.customHistory} axiosInstance={this.axiosInstance}/>\n                    </PrivateRoute>\n                    <PrivateRoute path={\"/invite\"}>\n                        <InvitePage axiosInstance={this.axiosInstance}/>\n                    </PrivateRoute>\n                    <Route path=\"*\">\n                        <div>This page not exist :( <Link to={\"/\"}>Go Home!</Link></div>\n                    </Route>\n                </Switch>\n            </Page.Main>\n        </Page></Router>;\n    }\n}","import React from 'react';\n\nimport Root from \"./components/Root\";\n\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n        <Root className={\"App-center\"}/>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}